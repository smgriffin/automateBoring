1. re.compile() returns Regex objects.

2. To avoid escaping the characters and therefore having to use extra backslashes.

3. search() returns a Match object or None

4. To get the actual strings that match the pattern use group()

5. Group 0 covers mathes the entire regular expression group 1 covers (\d\d\d) and group 2 covers (\d\d\d-\d\d\d\d)

6. Periods and parentheses can be escaped with a backslash

7. findall() will return a list of strings if there are no groups in the regular expression.  It will return a list of tuples if there are groups in the regular expression.

8. The | is called a pipe.  It can be used in regular expressions to match one of many expressions python|book will match 'python' or 'book'.

9. The ? will match text that has zero instances or one instance of whatever is prior to ? or be used to signify nongreedy matching.

10. + matches one or more of the preceeding group while * matches zero or more of the preceeding group.

11. {3} matches only exactly 3 of the preceeding group.  While {3,5} matches at least 3 but no more than 5 instances of the preceeding group.

12. \d matches any digit from 0-9.   \w matches any letter, number digit or underscore character (sometimes referred to as 'word').  \s matches any space, tab or newline characters (think of it as matching "space" characters).

13. \D matches any character that is NOT a numberic digit from 0-9.  \W matches any character that is NOT a letter, numeric digit or underscore.  \S matches any character that is NOT a space, tab or newline.

14. To make regex case-insensitive, you can pass re.IGNORECASE or re.I as an argument to re.compile()

15. The . character normally matches any character that is not a newline character.  re.DOTALL makes the . character match all characters including newline characters.

16. .* performs a greedy match, and the .*? performs a nongreedy match.

17. To match all numbers and lower case letters use the character class [a-z0-9]

18. 'X drummers, X pipers, five rings, X hens'

19. re.VERBOSE tells re.compile() to ignore whitespace and comments inside the regular expression string.

20. re.compile(r'^\d{1,3}(,\d{3})*$)

21. re.compile(r'^[A-Z]\w*\sNakamoto$')

22. re.compile(r'^[Alice|Bob|Carol]\s
				  [eats|pets|throws]\s
				  [BOB|EATS|CATS]\.', re.VERBOSE, re.I)
